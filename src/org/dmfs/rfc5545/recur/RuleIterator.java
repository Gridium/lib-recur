/*
 * Copyright (C) 2013 Marten Gajda <marten@dmfs.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */

package org.dmfs.rfc5545.recur;

import java.util.Iterator;
import java.util.Set;


/**
 * An abstract iterator for recurrence rules. All rule part filters inherit this class.
 * <p>
 * This class does not implement {@link Iterator} because that requires to know in advance if there are more instances to come. While this is easy to tell for a
 * COUNT rule it's difficult for an UNTIL and requires additional buffering. Also the {@link #nextSet()} method doesn't fit nicely into the {@link Iterator}
 * interface.
 * </p>
 * <p>
 * Intermediate iterators may return invalid instances (like 2013-02-29). The {@link SanityFilter} will filter them all, so the last iterator always returns
 * valid instances.
 * </p>
 * <p>
 * <strong>Note:</strong> Some rules may recur forever, so be sure to add some limitation to your code that stops iterating after a certain number of instances
 * or at a certain date.
 * </p>
 * 
 * @author Marten Gajda <marten@dmfs.org>
 */
abstract class RuleIterator
{
	/**
	 * The previous iterator instance. This is <code>null</code> for the {@link FreqIterator}.
	 */
	final RuleIterator mPrevious;


	/**
	 * Creates a new iterator that gets its input from <code>previous</code>.
	 * 
	 * @param previous
	 *            A RuleIterator that precedes this one in the chain of iterators or <code>null</code> if this is the first iterator (i.e. {@link FreqIterator}
	 *            ).
	 */
	RuleIterator(RuleIterator previous)
	{
		mPrevious = previous;
	}


	/**
	 * Get the next instance. The instances are guaranteed to be strictly increasing in time.
	 * <p>
	 * If the last instance has been iterated, all subsequent calls to this method will return <code>null</code>.
	 * </p>
	 * 
	 * @return An {@link Instance} that specifies the next instance or <code>null</code> if there are no more instances.
	 */
	public abstract Instance next();


	/**
	 * Return the next instance set. That includes all instances that belong to one interval as generated by the {@link FreqIterator}. If an interval is empty
	 * because all instances have been filtered by some rule this method will skip this interval and return the next non-empty interval.
	 * <p>
	 * The values in two separate intervals are guaranteed to be strictly increasing and to not overlap, i.e. the values in one set are always later in time
	 * than the values in the previous set.
	 * </p>
	 * <p>
	 * If the last interval has been iterated, all subsequent calls to this method will return <code>null</code>.
	 * </p>
	 * <p>
	 * Note that the result is an unmodifiable {@link Set}, so don't try to modify it.
	 * </p>
	 * 
	 * @return A {@link Set} of {@link Instance}s with the next non-empty interval or null if the last interval has been iterated.
	 */
	abstract Set<Instance> nextSet();

}
